I"ù<p><span style="font-size:20px;font-weight:bold">My code:</span></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">M</span><span class="p">,</span><span class="n">C</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">memo</span><span class="p">[</span><span class="mi">210</span><span class="p">][</span><span class="mi">25</span><span class="p">],</span>
        <span class="n">price</span><span class="p">[</span><span class="mi">25</span><span class="p">][</span><span class="mi">25</span><span class="p">];</span>

<span class="kt">int</span> <span class="nf">backtracking</span><span class="p">(</span><span class="kt">int</span> <span class="n">money</span><span class="p">,</span><span class="kt">int</span> <span class="n">g</span><span class="p">){</span>
	
	<span class="k">if</span><span class="p">(</span><span class="n">money</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="o">-</span><span class="mi">1000000</span><span class="p">;</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">g</span><span class="o">==</span><span class="n">C</span><span class="p">)</span><span class="k">return</span> <span class="n">M</span><span class="o">-</span><span class="n">money</span><span class="p">;</span>
	<span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">memo</span><span class="p">[</span><span class="n">money</span><span class="p">][</span><span class="n">g</span><span class="p">]</span><span class="o">!=-</span><span class="mi">1</span><span class="p">)</span><span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">money</span><span class="p">][</span><span class="n">g</span><span class="p">];</span>
	<span class="k">else</span><span class="p">{</span>
		<span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">price</span><span class="p">[</span><span class="n">g</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">ans</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">backtracking</span><span class="p">(</span><span class="n">money</span><span class="o">-</span><span class="n">price</span><span class="p">[</span><span class="n">g</span><span class="p">][</span><span class="n">i</span><span class="p">],</span><span class="n">g</span><span class="o">+</span><span class="mi">1</span><span class="p">));</span>
			<span class="p">}</span>
			<span class="k">return</span> <span class="n">memo</span><span class="p">[</span><span class="n">money</span><span class="p">][</span><span class="n">g</span><span class="p">]</span> <span class="o">=</span> <span class="n">ans</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">N</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">N</span><span class="o">--</span><span class="p">){</span>
		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">M</span><span class="o">&gt;&gt;</span><span class="n">C</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">C</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
			<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
				<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">price</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="n">memset</span><span class="p">(</span><span class="n">memo</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">sizeof</span> <span class="n">memo</span><span class="p">);</span>
			<span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">backtracking</span><span class="p">(</span><span class="n">M</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
			<span class="k">if</span><span class="p">(</span><span class="n">score</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">"no solution"</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
			<span class="k">else</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">score</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

:ET