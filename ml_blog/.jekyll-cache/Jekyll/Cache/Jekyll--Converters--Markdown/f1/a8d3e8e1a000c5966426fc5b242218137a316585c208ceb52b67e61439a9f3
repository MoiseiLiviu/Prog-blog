I"ð<p><span style="font-size:20px;font-weight:bold">My code:</span></p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="cp">#include &lt;bits/stdc++.h&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
<span class="n">map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">adj</span><span class="p">;</span>
<span class="kt">bool</span> <span class="n">possible</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">visited</span><span class="p">[</span><span class="mi">20</span><span class="p">][</span><span class="mi">20</span><span class="p">];</span>

<span class="kt">void</span> <span class="nf">backtrack</span><span class="p">(</span><span class="kt">int</span> <span class="n">m</span><span class="p">,</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span><span class="kt">int</span> <span class="n">end</span><span class="p">){</span>
	
	<span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">==</span><span class="n">N</span><span class="p">){</span>
		<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">cell</span> <span class="o">:</span> <span class="n">adj</span><span class="p">[</span><span class="n">m</span><span class="p">]){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">cell</span><span class="o">==</span><span class="n">end</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">cell</span><span class="p">][</span><span class="n">m</span><span class="p">]</span><span class="o">||</span><span class="n">visited</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">cell</span><span class="p">]))</span><span class="n">possible</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="k">else</span><span class="p">{</span>
		<span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="n">cell</span> <span class="o">:</span> <span class="n">adj</span><span class="p">[</span><span class="n">m</span><span class="p">]){</span>
			<span class="k">if</span><span class="p">(</span><span class="n">visited</span><span class="p">[</span><span class="n">m</span><span class="p">][</span><span class="n">cell</span><span class="p">]</span><span class="o">||</span><span class="n">visited</span><span class="p">[</span><span class="n">cell</span><span class="p">][</span><span class="n">m</span><span class="p">])</span><span class="k">continue</span><span class="p">;</span>
			<span class="n">visited</span><span class="p">[</span><span class="n">cell</span><span class="p">][</span><span class="n">m</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
			<span class="n">backtrack</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">end</span><span class="p">);</span>
			<span class="n">visited</span><span class="p">[</span><span class="n">cell</span><span class="p">][</span><span class="n">m</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
			
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span><span class="n">visited</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="kt">int</span> <span class="n">M</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">,</span><span class="o">&amp;</span><span class="n">M</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="n">N</span><span class="p">){</span>
		<span class="n">adj</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
		<span class="n">possible</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">start1</span><span class="p">,</span><span class="n">start2</span><span class="p">,</span><span class="n">end1</span><span class="p">,</span><span class="n">end2</span><span class="p">;</span>
		<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">start1</span><span class="o">&gt;&gt;</span><span class="n">start2</span><span class="o">&gt;&gt;</span><span class="n">end1</span><span class="o">&gt;&gt;</span><span class="n">end2</span><span class="p">;</span>
		<span class="k">while</span><span class="p">(</span><span class="n">M</span><span class="o">--</span><span class="p">){</span>
			<span class="kt">int</span> <span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">;</span>
			<span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">k</span><span class="o">&gt;&gt;</span><span class="n">v</span><span class="p">;</span>
			<span class="n">adj</span><span class="p">[</span><span class="n">k</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
			<span class="n">adj</span><span class="p">[</span><span class="n">v</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
			<span class="p">}</span>
		
		<span class="n">backtrack</span><span class="p">(</span><span class="n">start2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">end1</span><span class="p">);</span>
		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">possible</span><span class="o">?</span><span class="s">"YES"</span><span class="o">:</span><span class="s">"NO"</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
		<span class="p">}</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
:ET